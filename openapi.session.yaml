openapi: 3.0.3
info:
  title: Mock TODO Server API (Session Authentication)
  description: A mock TODO server that provides REST API endpoints for managing tasks with user authentication (Session).
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local development server

security:
  - SessionAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive a session cookie.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          headers:
            Set-Cookie:
              description: Session cookie
              schema:
                type: string
                example: session_id=abc123; HttpOnly; Secure; SameSite=Strict
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request body or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and invalidate session.
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
        '400':
          description: Bad Request (e.g., no session cookie found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user information
      description: Get information about the currently authenticated user.
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks
      description: Retrieve all tasks belonging to the authenticated user.
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Create a new task associated with the authenticated user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Retrieve a specific task by its ID. Users can only access their own tasks.
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid task ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied (task doesn't belong to user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Tasks
      summary: Update task
      description: Update a specific task by its ID. Users can only update their own tasks.
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid task ID or request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied (task doesn't belong to user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete a specific task by its ID. Users can only delete their own tasks.
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Task deleted successfully
        '400':
          description: Invalid task ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied (task doesn't belong to user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    SessionAuth:
      type: apiKey
      in: cookie
      name: session_id

  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          description: Unique task identifier
          example: 1
        title:
          type: string
          description: Task title
          example: "Complete project documentation"
        user_id:
          type: integer
          description: ID of the user who owns this task
          example: 1
        created_at:
          type: string
          description: Task creation timestamp
          example: "2023-01-01T00:00:00Z"
      required:
        - id
        - title
        - user_id
        - created_at

    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique user identifier
          example: 1
        username:
          type: string
          description: Username
          example: "john_doe"
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
          example: "2023-01-01T00:00:00Z"
      required:
        - id
        - username
        - created_at

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: Username
          example: "john_doe"
        password:
          type: string
          description: Password
          example: "password123"
      required:
        - username
        - password

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          description: Username
          example: "john_doe"
        password:
          type: string
          description: Password (minimum 6 characters)
          example: "password123"
          minLength: 6
      required:
        - username
        - password

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user

    CreateTaskRequest:
      type: object
      properties:
        title:
          type: string
          description: Task title
          example: "Complete project documentation"
      required:
        - title

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          description: Updated task title
          example: "Updated project documentation"
      required:
        - title

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid credentials"
      required:
        - error

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Tasks
    description: Task management endpoints
